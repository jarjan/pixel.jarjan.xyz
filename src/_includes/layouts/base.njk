<!DOCTYPE html>
<html lang="en" class="no-js">
  <head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <meta http-equiv="X-UA-Compatible" content="ie=edge">
    <title>
      {% if title %}{{ title }} |{% else %}
      {% endif %}
      pixel.jarjan.xyz
    </title>
    {% if description %}
      <meta name="description" content="{{ description }}">
    {% endif %}
    <link rel="stylesheet" href="/css/styles.css">
  </head>

  <body class="relative bg-white">
    {{ content | safe }}
  </body>
  <script>
    (function () {
      'use strict';
      document.documentElement.className = document
        .documentElement
        .className
        .replace('no-js', 'js');

      // Stolen from: https://scotch.io/tutorials/lazy-loading-images-for-performance-using-intersection-observer
      var images = document.querySelectorAll('img.lazy');

      var options = {
        // If the image gets within 50px in the Y axis, start the download.
        root: null, // Page as root
        rootMargin: '0px',
        threshold: 0.1
      };

      var fetchImage = function (url) {
        return new Promise((resolve, reject) => {
          var image = new Image();
          image.src = url;
          image.onload = resolve;
          image.onerror = reject;
        });
      }

      var loadImage = function (image) {
        var src = image.dataset.src;
        fetchImage(src).then(() => {
          image.src = src;
        })
      }

      var handleIntersection = function (entries, observer) {
        entries.forEach(entry => {
          if (entry.intersectionRatio > 0) {
            loadImage(entry.target)
          }
        })
      }

      // The observer for the images on the page
      var observer = new IntersectionObserver(handleIntersection, options);
      images.forEach(function (img) {
        observer.observe(img);
      })
    })();
  </script>

</html>