<!DOCTYPE html>
<html lang="en" class="no-js">

<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <meta http-equiv="X-UA-Compatible" content="ie=edge">
  <title>{% if title %}{{ title }}{% else %}Photos{% endif %}</title>
  {% if description %}
  <meta name="description" content="{{ description }}">{% endif %}
  <style>
    .no-js img.lazy {
      display: none;
    }

    html {
      box-sizing: border-box;
    }

    *,
    *:before,
    *:after {
      box-sizing: inherit;
    }


    body {
      font-family: sans-serif;
    }

    ul {
      display: flex;
      flex-wrap: wrap;
      margin-left: -1rem;
      margin-right: -1rem;
    }

    ul li {
      width: 50%;
      padding: 1rem;
    }

    ul li figure {
      height: 100%;
      display: flex;
      flex-direction: column;
      position: relative;
    }

    ul li figure img,
    ul li figure noscript {
      object-fit: cover;
      max-width: 100%;
      height: 100%;
    }

    ul li figure figcaption {
      margin-top: 1rem;
    }

    ol {
      padding: 1rem 0;
      border-top: solid 1px grey;
      border-bottom: solid 1px gray;
      display: flex;
      justify-content: space-between;
    }

    figure {
      margin: 0;
    }

    ul,
    ol {
      list-style: none;
      padding-left: 0;
      padding-right: 0;
    }

    main {
      max-width: 960px;
      margin: 1rem auto;
    }

    footer {
      font-size: 0.875rem;
      text-align: center;
      margin: 2rem 0;
    }

    table {
      width: 100%;
      text-align: left;
    }

    table td,
    table th {
      padding: .5rem;
      border: solid 1px gray;
    }
  </style>
</head>

<body>
  {{ content | safe }}
</body>
<script>
  (function () {
    'use strict';
    document.documentElement.className = document.documentElement.className.replace('no-js', 'js');

    // Stolen from: https://scotch.io/tutorials/lazy-loading-images-for-performance-using-intersection-observer
    var images = document.querySelectorAll('img.lazy');

    var options = {
      // If the image gets within 50px in the Y axis, start the download.
      root: null, // Page as root
      rootMargin: '0px',
      threshold: 0.1
    };

    var fetchImage = function (url) {
      return new Promise((resolve, reject) => {
        var image = new Image();
        image.src = url;
        image.onload = resolve;
        image.onerror = reject;
      });
    }

    var loadImage = function (image) {
      var src = image.dataset.src;
      fetchImage(src).then(() => {
        image.src = src;
      })
    }

    var handleIntersection = function (entries, observer) {
      entries.forEach(entry => {
        if (entry.intersectionRatio > 0) {
          loadImage(entry.target)
        }
      })
    }

    // The observer for the images on the page
    var observer = new IntersectionObserver(handleIntersection, options);
    images.forEach(function (img) {
      observer.observe(img);
    })
  })();
</script>

</html>